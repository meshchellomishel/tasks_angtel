
Задание 9.1.

Разработать программу, которая последовательно читает, а потом модифицирует
базу данных Redis.

Читаемые ключи.
clist - список значений.
chash - хэш-таблица.

Записываемые ключи.
slist - список значений. Содержит подмножество clist - те значения clist,
которые одновременно являются ключами в chash.
shash - хэш-таблица. Ключи такие же как в chash. Значение для ключа k -
chash[k] * 2, если k содержится в clist, иначе 0.

Пример.
Пусть в БД Redis предварительно задана вручную следующая конфигурация:
{
	"clist" : ["eth2", "eth5", "eth6"],
	"chash" : {
		"eth0" : "100",
		"eth2" : "20",
		"eth5" : "30",
		"eth10" : "4",
	}
}

Запускаем программу для модификации БД:
$ ./lab9.1.py

Новые значения должны отображаться через redis-cli:
$ redis-cli
> LRANGE slist 0 -1
1) "eth2"
2) "eth5"
> HGET shash eth0
"0"
> HGET shash eth2
"40"
> HGET shash eth5
"60"
> HGET shash eth100
(nil)

Задание 9.2.

Разработать программу для управления интерфейсами VLAN через конфигурационную
базу данных Redis. Программа должна читать конфигурацию VLAN'ов из БД Redis,
применять эту конфигурацию к операционной системе, далее читать из ОС статус
VLAN-интерфейсов и записывать его в БД Redis.

Конфигурация.
master - имя интерфейса, на котором создаются дочерние VLAN-интерфейсы.
Например, eth0.
vlans - список номеров VLAN'ов, по которым создаются дочерние VLAN-интерфейсы
на master. Например, если заданы номера 1,5,10, то создаются VLAN-интерфейсы
eth0.1, eth0.5 и eth0.10.
admin-state - хэш-таблица, задающая административное состояние (т.е. включен
или выключен) VLAN-интерфейсов. Ключи в таблице - имена VLAN-интерфейсов
(eth0.1, eth0.5 и т.д.). Значения - b'1' (включен) или b'0' (выключен).

Статус.
oper-state - хэш-таблица, отображающая операционное состояние (т.е. есть
соединение или нет) VLAN-интерфейсов. Ключи в таблице - имена VLAN-интерфейсов
(eth0.1, eth0.5 и т.д.). Значения - b'1' (есть соединение) или b'0' (нет
соединения).
ifindex - хэш-таблица, отображающая индексы (ifindex) VLAN-интерфейсов.

Конфигурацию следует применять с помощью утилит ip (пакет iproute2) и vconfig.
Статус следует читать из виртуальной файловой системы sysfs - файлы operstate
и ifindex в каталогах /sys/class/net/<name>.

Пример.
Пусть в БД Redis задана следующая конфигурация:
{
	"master" : "eth0",
	"vlans" : ["10", "20"].
	"admin-state" : {
		"eth0.10" : "1",
		"eth0.20" : "0",
	}
}
Пусть при этом в системе уже существует интерфейс eth0.30.

Запускаем программу управления:
$ ./lab9.2.py

После этого в системе должны появиться сконфигурированные VLAN-интерфейсы:
$ ip link show
...
128: eth0.10@eth0: <...,UP,...> ... state UP ...
129: eth0.20@eth0: <...,DOWN,...> ... state DOWN ...
130: eth0.30@eth0: <...,UP,...> ... state DOWN ...
...

Статус интефейсов должен быть доступен для просмотра через redis-cli:
$ redis-cli
> HKEYS oper-state
1) "eth0.10
2) "eth0.20
3) "eth0.30
> HGET oper-state eth0.10
"1"
> HGET oper-state eth0.30
"0"
> HGET ifindex eth0.20
"129"
> HGET ifindex eth0.30
"130"
